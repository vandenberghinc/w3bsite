#!/usr/bin/env bash

# functions.
function osinfo() {
    user=$(echo $USER)
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        os="linux"
        group="root"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        os="macos"
        group="wheel"
    elif [[ "$OSTYPE" == "cygwin" ]]; then
       os="posix"     # POSIX compatibility layer and Linux environment emulation for Windows
       group="root"
    elif [[ "$OSTYPE" == "msys" ]]; then
        os="mysys"    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
        group="root"
    elif [[ "$OSTYPE" == "win32" ]]; then
        os="win32"    # I'm not sure this can happen.
        group="root"
    elif [[ "$OSTYPE" == "freebsd"* ]]; then
        os="freebsd"    # ...
        group="root"
    else
        os="unknown"    # Unknown.
        group="root"
    fi
    #echo "Operating system: "$os
}
function command_exists() {
    if ! command -v "$1" &> /dev/null ; then
        echo "false"
    else
        echo "true"
    fi
}
function log() {
    if [ "$2" == "done" ]; then
        echo "$1 ... done"
        echo ""
    elif [ "$2" == "failed" ]; then
        echo "$1 ... failed"
    elif [ "$2" == "error" ]; then
        echo "$1 ... failed"
    else
        echo "$1 ..."
    fi
}
function argument_present() {
    c=0
    success="false"
    for var in "$@"
    do
        if (( c > 0 )) ; then
            if [ "$var" == "$1" ] ; then
                success="true"
                break
            fi
        fi
        ((c=c+1))
    done
    echo $success
}
function get_argument() {
    c=0
    success="false"
    value="none"
    for var in "$@"
    do
        if (( c > 0 )) ; then
            if [ "$var" == "$1" ] ; then
                success="true"
            elif [ "$success" == "true" ] ; then
                value=$var
                break
            fi
        fi
        ((c=c+1))
    done
    echo $value
}

# check etc dir.
alias="sshmount"
package="/usr/local/lib/$alias/"
pypi_package="false"

# defaults.
osinfo
requirements_dir=$(dirname "$0")
current_installation=${requirements_dir///requirements/}
package_base=${package///$alias/}
if [[ ! -d "/usr/local/lib" ]] ; then
    sudo mkdir /usr/local/lib
fi
if [[ ! -d "/usr/local/bin" ]] ; then
    sudo mkdir /usr/local/bin
fi
if [[ "$alias" == "" ]] ; then
    echo "Error: Specify the alias variable in installer script: $current_installation/requirements/installer."
    exit 1
fi
if [ $(get_argument "--user" $@) != "none" ] ; then
    user=$(get_argument "--user" $@)
fi

# help.
HELP1=$(argument_present "--help" $@)
HELP2=$(argument_present "-h" $@)
if [[ "$HELP1" == "true" ]]  || [[ "$HELP2" == "true" ]] ; then
    echo """Description: $alias installer script.
Usage: ./installer <mode> <options> 
Modes:
    -h / --help         Show the documentaton.
Options:
Author: Daan van den Bergh. 
Copyright: Â© Daan van den Bergh 2021. All rights reserved."""
    exit 0
fi

# logs.
echo "Installing $alias."

# install source code.
if [[ "$current_installation" != "$package" ]] ; then
    sudo rm -fr $package
    sudo mkdir $package
    sudo chmod 770 $package
    sudo chown $user:$group $package
    sudo rm -fr $package
    cp -r $current_installation $package
    sudo chmod -R 770 $package
    sudo chown -R $user:$group $package
else 
    sudo chmod -R 770 $package
    sudo chown -R $user:$group $package
fi

# install dependencies.
# macos.
if [ "$os" == "macos" ]; then

	# xcode.
	xcode-select --install 2> /dev/null

    #    -    check HomeBrew:
    if [ "$(command_exists $brew)" == "true" ] ; then
        echo "HomeBrew is not installed."
        echo "Installing HomeBrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" && brew doctor
    fi

    # open ssh.
    brew install python3 yubico-piv-tool opensc 2> /dev/null

# linux.
elif [ "$os" == "linux" ]; then
    echo "Installing Linux requirements..."

    # update.
    sudo apt-get -y update
    sudo apt-get -y upgrade

    # network.
    sudo apt-get -y install net-tools

    # python:
    sudo apt-get -y upgrade libjpeg-dev zlib1g-dev build-essential cmake python3 python3-pip python3-venv python3-setuptools python3-dev
    sudo apt-get -y install opensc yubico-piv-tool yubikey-manager

# invalid.
else
    echo "Error: Unsupported operating system ["$os"]."
    exit 1
fi

# python requirements:
file=$requirements_dir"/requirements.pip"
if [ -f "$file" ] ; then
    echo "Installing PIP requirements..."
    sudo -u $user pip3 install -r $file 2> /dev/null
    if [[ "$os" == "macos" ]] && [[ -f "/usr/bin/pip3" ]] ; then
        sudo /usr/bin/pip3 install -r $file -u $user 2> /dev/null
    fi
fi
        
# install alias.
if [[ "$website_package" == "true" ]] || [[ "$website_package" == "True" ]] ; then
    python3 $package/website.py --create-alias $alias --sudo 
elif [[ "$pypi_package" == "true" ]] ; then
    python3 $package --create-alias $alias --sudo
fi

# regular log for confirmation:
echo "Successfully installed $alias."
